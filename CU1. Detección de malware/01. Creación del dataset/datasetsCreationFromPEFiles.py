# Bibliotecas necesarias
import pefile
import csv
import os
import sys

# Localización de las muestras
malware = 'E:/jtripos/TFG/malware/'
legitimate = 'E:/jtripos/TFG/legitimate/'

# Nombre de los datasets que se crearán
malwareDatasetName = 'malwareDataset.csv'
legitimateDatasetName = 'legitimateDataset.csv'

# Definición de la estructura de un fichero PE por orden de aparición
def PEFileStructure(name, pe, malware):
    features = {'Name': name,
                'e_magic': pe.DOS_HEADER.e_magic,
                'e_cblp': pe.DOS_HEADER.e_cblp,
                'e_cp': pe.DOS_HEADER.e_cp,
                'e_crlc': pe.DOS_HEADER.e_crlc,
                'e_cparhdr': pe.DOS_HEADER.e_cparhdr,
                'e_minalloc': pe.DOS_HEADER.e_minalloc,
                'e_maxalloc': pe.DOS_HEADER.e_maxalloc,
                'e_ss': pe.DOS_HEADER.e_ss,
                'e_sp': pe.DOS_HEADER.e_sp,
                'e_csum': pe.DOS_HEADER.e_csum,
                'e_ip': pe.DOS_HEADER.e_ip,
                'e_cs': pe.DOS_HEADER.e_cs,
                'e_lfarlc': pe.DOS_HEADER.e_lfarlc,
                'e_ovno': pe.DOS_HEADER.e_ovno,
                'e_oemid': pe.DOS_HEADER.e_oemid,
                'e_oeminfo': pe.DOS_HEADER.e_oeminfo,
                'e_lfanew': pe.DOS_HEADER.e_lfanew,
                'Machine': pe.FILE_HEADER.Machine,
                'NumberOfSections': pe.FILE_HEADER.NumberOfSections,
                'TimeDateStamp': pe.FILE_HEADER.TimeDateStamp,
                'PointerToSymbolTable': pe.FILE_HEADER.PointerToSymbolTable,
                'NumberOfSymbols': pe.FILE_HEADER.NumberOfSymbols,
                'SizeOfOptionalHeader': pe.FILE_HEADER.SizeOfOptionalHeader,
                'Characteristics': pe.FILE_HEADER.Characteristics,
                'Magic': pe.OPTIONAL_HEADER.Magic,
                'MajorLinkerVersion': pe.OPTIONAL_HEADER.MajorLinkerVersion,
                'MinorLinkerVersion': pe.OPTIONAL_HEADER.MinorLinkerVersion,
                'SizeOfCode': pe.OPTIONAL_HEADER.SizeOfCode,
                'SizeOfInitializedData': pe.OPTIONAL_HEADER.SizeOfInitializedData,
                'SizeOfUninitializedData': pe.OPTIONAL_HEADER.SizeOfUninitializedData,
                'AddressOfEntryPoint': pe.OPTIONAL_HEADER.AddressOfEntryPoint,
                'BaseOfCode': pe.OPTIONAL_HEADER.BaseOfCode,
                'ImageBase': pe.OPTIONAL_HEADER.ImageBase,
                'SectionAlignment': pe.OPTIONAL_HEADER.SectionAlignment,
                'FileAlignment': pe.OPTIONAL_HEADER.FileAlignment,
                'MajorOperatingSystemVersion': pe.OPTIONAL_HEADER.MajorOperatingSystemVersion,
                'MinorOperatingSystemVersion': pe.OPTIONAL_HEADER.MinorOperatingSystemVersion,
                'MajorImageVersion': pe.OPTIONAL_HEADER.MajorImageVersion,
                'MinorImageVersion': pe.OPTIONAL_HEADER.MinorImageVersion,
                'MajorSubsystemVersion': pe.OPTIONAL_HEADER.MajorSubsystemVersion,
                'MinorSubsystemVersion': pe.OPTIONAL_HEADER.MinorSubsystemVersion,
                'SizeOfHeaders': pe.OPTIONAL_HEADER.SizeOfHeaders,
                'CheckSum': pe.OPTIONAL_HEADER.CheckSum,
                'SizeOfImage': pe.OPTIONAL_HEADER.SizeOfImage,
                'Subsystem': pe.OPTIONAL_HEADER.Subsystem,
                'DllCharacteristics': pe.OPTIONAL_HEADER.DllCharacteristics,
                'SizeOfStackReserve': pe.OPTIONAL_HEADER.SizeOfStackReserve,
                'SizeOfStackCommit': pe.OPTIONAL_HEADER.SizeOfStackCommit,
                'SizeOfHeapReserve': pe.OPTIONAL_HEADER.SizeOfHeapReserve,
                'SizeOfHeapCommit': pe.OPTIONAL_HEADER.SizeOfHeapCommit,
                'LoaderFlags': pe.OPTIONAL_HEADER.LoaderFlags,
                'NumberOfRvaAndSizes': pe.OPTIONAL_HEADER.NumberOfRvaAndSizes,
                'Malware': malware
                }

    return features

# Creación del dataset de malware
with open(malwareDatasetName, 'w+', newline='') as csvfile:
    try:
        PEFiles = os.listdir(legitimate)
        fields = PEFileStructure('test', pefile.PE(legitimate + PEFiles[0], fast_load=True), 0)
        fieldNames = fields.keys()
        writer = csv.DictWriter(csvfile, fieldnames=fieldNames)
        writer.writeheader()
        
        for fileName in os.listdir(malware):
            try:
                pe = pefile.PE(malware + fileName)
                writer.writerow(PEFileStructure(fileName, pe, 1))
            except Exception as e:
                print(e)

    except Exception as e:
        print(e)

# Creación del dataset de archivos legítimos
with open(legitimateDatasetName, 'w+', newline='') as csvfile:
    try:
        PEFiles = os.listdir(legitimate)
        fields = PEFileStructure('test', pefile.PE(legitimate + PEFiles[0], fast_load=True), 0)
        fieldNames = fields.keys()
        writer = csv.DictWriter(csvfile, fieldnames=fieldNames)
        writer.writeheader()
        
        for fileName in os.listdir(legitimate):
            try:
                pe = pefile.PE(legitimate + fileName)
                writer.writerow(PEFileStructure(fileName, pe, 0))
            except Exception as e:
                print(e)
                
    except Exception as e:
        print(e)
